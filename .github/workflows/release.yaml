name: Release workflow

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'

env:
  GHR_PROJECT_REPONAME: ui5-language-assistant
  GHR_PROJECT_USERNAME: SAP

jobs:
  build:
    if: github.repository == 'vadson71/ui5-language-assistant' && contains(github.ref, 'refs/tags/v')
    strategy:
      matrix:
        os: [ubuntu-latest]
        node-version: [14.x, 16.x, 18.x]
    runs-on: ${{ matrix.os }}
    outputs:
      changes: ${{ steps.package-version.outputs.current-version }} # map step output to job output

    steps:
      - name: Checkout code repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # will fetch all history
      - name: Run install
        uses: borales/actions-yarn@v4
        with:
          cmd: install # will run `yarn install` command
      - name: Run build
        uses: borales/actions-yarn@v4
        with:
          cmd: build:ci # TODO: will run `yarn run ci` command

      - name: Upload vsix artifact
        uses: actions/upload-artifact@v3
        with:
          name: vscode-extension-file
          path: ./packages/vscode-ui5-language-assistant/vscode-ui5-language-assistant*.vsix
          if-no-files-found: error # 'warn' or 'ignore' are also available, defaults to `warn`

        # Get release version number
      - name: get-npm-version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@main
        with:
          path: ./packages/vscode-ui5-language-assistant

  gh-delpoy:
    strategy:
      matrix:
        os: [ubuntu-latest]
        node-version: [14.x]
    runs-on: ${{ matrix.os }}
    needs: build
    steps:
      - name: Setup Go 1.18
        uses: actions/setup-go@v3
        with:
          go-version: '^1.18'
      - name: 'prepare to deploy'
        run:
          go version

      # Download vsix artifact
      - name: 'make folder'
        run: mkdir ./artifacts
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: vscode-extension-file
          path: ./artifacts
      - name: 'check artifacts'
        run: ls ./artifacts -la

      # Publish on GitHub
      - name: 'Publish Release on GitHub'
        # run: echo 'export GOPATH=~/go' >> $BASH_ENV
        run: go install github.com/tcnksm/ghr@latest

      - name: Check
        run: echo ${{ secrets.GITHUB_TOKEN }} -u ${{env.GHR_PROJECT_USERNAME}} -r ${{env.GHR_PROJECT_REPONAME}} -replace ${{ needs.build.outputs.current-version}} ./artifacts/
  #       ghr -t ${{ secrets.GITHUB_TOKEN }} -u ${{env.GHR_PROJECT_USERNAME}} -r ${{env.GHR_PROJECT_REPONAME}} -replace ${{ needs.build.outputs.current-version}} ./artifacts/

  deploy-npm:
    strategy:
      matrix:
        os: [ubuntu-latest]
        node-version: [14.x]
    runs-on: ${{ matrix.os }}
    needs: build

    steps:
      - name: Prerequisite
        run: sudo apt-get install libxss1

      - name: Checkout code repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # will fetch all history

      # Pure lockfile simply doesn't write the lockfile if it has changes.
      - name: Run install
        uses: borales/actions-yarn@v4
        with:
          cmd: install --pure-lockfile

      # reuse stored generated vsix
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: vscode-extension-file
          path: ./packages/vscode-ui5-language-assistant-bas-ext

      - name: Check
        run: ls ./packages/vscode-ui5-language-assistant-bas-ext -la

      - name: Prepare .npmrc
        run:
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" >> ~/.npmrc

      # To help debug when lerna detects changes to the working tree and fails the publish
      - name: Status
        run: git status

      # - name: Publish
      # # https://github.com/lerna/lerna/issues/2788
      #   uses: borales/actions-yarn@v4
      #   with:
      #     cmd: run release:publish --no-verify-access

      