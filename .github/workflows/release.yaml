name: Release workflow

on:
  # Trigger the workflow only manually
  workflow_dispatch:
      # inputs:
      #   version:
      #     description: 'Action'
      #       required: true
      #       type: choice
      #       options:
      #       - version bump
      #       - release
jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest]
        node-version: [14.x]  # TODO: run for all versions
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0    # will fetch all history
      - name: Run install
        uses: borales/actions-yarn@v4
        with:
          cmd: install # will run `yarn install` command
        # env:
        #   NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }} # if needed
      - name: Run build
        uses: borales/actions-yarn@v4
        with:
          cmd: run build:quick # will run `yarn run ci` command
        #
      - name: Upload vsix artifact
        uses: actions/upload-artifact@v3
        with:
          name: vscode-extension-file
          path: ./packages/vscode-ui5-language-assistant/vscode-ui5-language-assistant*.vsix
  # version:
  #       # Run version job only on pushes to the main branch. The job depends on completion of the build job.
  #       if: github.repository == 'vadson71/ui5-language-assistant-vk' && github.event_name == 'push' && github.ref == 'refs/heads/main'
  #       runs-on: ubuntu-latest
  #       needs: build
  #       outputs:
  #           changes: ${{ steps.changesetVersion.outputs.changes }} # map step output to job output
  #       steps:
  #           - name: Checkout code repository
  #             uses: actions/checkout@v3
  #             with:
  #                 fetch-depth: 0
  #                 token: ${{ secrets.ACCESS_PAT }}
  #           - name: Setup pnpm
  #             uses: pnpm/action-setup@v2.2.2
  #             with:
  #                 version: 7.1.0
  #                 run_install: true
  #           - name: Cache pnpm modules
  #             uses: actions/cache@v3
  #             env:
  #                 cache-name: cache-pnpm-modules
  #             with:
  #                 path: ~/.pnpm-store
  #                 key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/pnpm-lock.yaml') }}
  #                 restore-keys: |
  #                     ${{ runner.os }}-build-${{ env.cache-name }}-
  #           - name: Use Node.js 14.x
  #             uses: actions/setup-node@v3
  #             with:
  #                 node-version: 14.x
  #           - name: Install pnpm modules
  #             run: pnpm install
  #           - name: Apply changesets
  #             id: changesetVersion
  #             run: |
  #                 echo ::set-output name=changes::$(pnpm ci:version 2>&1 | grep -q 'No unreleased changesets found' && echo 'false' || echo 'true')
  #                 git status
  #           - name: Commit and push changes
  #             if: steps.changesetVersion.outputs.changes == 'true'
  #             run: |
  #                 git config user.name github-actions
  #                 git config user.email github-actions@github.com
  #                 git status
  #                 git add -A
  #                 git status
  #                 git commit -m "chore: apply latest changesets" --no-verify || echo "No changesets found"
  #                 git log --pretty=oneline | head -n 10
  #                 git push
  # gh-delpoy:
  #   strategy:
  #     matrix:
  #       os: [ubuntu-latest]
  #       node-version: [14.x]  # TODO: run for all versions
  #   runs-on: ${{ matrix.os }}
  #   needs: build
  #   steps:
  #     - name: Setup Go 1.18
  #       uses: actions/setup-go@v3
  #       with:
  #         go-version: '^1.18'
  #     - name: 'prepare to deploy'
  #       run: go version
  #         #- name: Scripts
  #         # uses: alinz/script.go@main
  #         # with:
  #         #   workspace: ${{ github.workspace }} # <- this is important
  #         #   paths: .github/workflows/one,.github/workflows/two #<- the path to your go scripts
  #     - name: 'make folder'
  #       run: mkdir ./artifacts
  #     - name: Download artifact
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: vscode-extension-file
  #         path: ./artifacts
  #     - name: 'check artifacts'
  #       run: ls -la
      # - name: "Publish Release on GitHub"
#${{ secrets.GITHUB_TOKEN }}
# How to obtain new version?
#  CIRCLE_PROJECT_REPONAME=ui5-language-assistant
#   CIRCLE_PROJECT_USERNAME=SAP
        # run: echo 'export GOPATH=~/go' >> $BASH_ENV
        #       go get github.com/tcnksm/ghr
        #       VERSION=${CIRCLE_TAG}
        #       ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -replace ${VERSION} ./artifacts/