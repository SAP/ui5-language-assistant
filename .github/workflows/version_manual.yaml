name: Version bump for release workflow

# on:
# Trigger the workflow only manually
# workflow_dispatch:
#   inputs:
#     job_name:
#       description: 'Releases new version  '
#       required: true
#       type: choice
#       default: 'version'
#       options:
#         - version
#         - release

on:
  push:
    branches: [feat/switch-to-github-actions]

jobs:
  build:
    #if: github.ref == 'refs/heads/master'
    strategy:
      matrix:
        os: [ubuntu-latest]
        node-version: [14.x, 16.x, 18.x]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # will fetch all history
      - name: Run install
        uses: borales/actions-yarn@v4
        with:
          cmd: install # will run `yarn install` command
      - name: Run build
        uses: borales/actions-yarn@v4
        with:
          cmd: run build:quick # TODO will run `yarn run ci` command
      - name: Run SonarCloud scan
        if: matrix.os == 'ubuntu-latest' && matrix.node-version == '14.x'
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_PAT }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  compliance:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: REUSE Compliance Check
        uses: fsfe/reuse-action@v1
        with:
          args: --include-submodules lint

  version:
    # Run version job only on pushes to the main branch. The job depends on completion of the build job.
    # && github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    needs: [build, compliance]
    # outputs: TODO remove
    #   changes: ${{ steps.changesetVersion.outputs.changes }} # map step output to job output
    steps:
      - name: Checkout code repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.ACCESS_PAT }} # needed to auto trigger release job
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 14

      # TODO: cache node modules
      - name: Run install
        uses: borales/actions-yarn@v4
        with:
          cmd: install # will run `yarn install` command

      - name: Apply changesets
        id: changesetVersion
        run: |
          echo ::set-output name=changes::$(npm run ci:version 2>&1 | grep -q 'No unreleased changesets found' && echo 'false' || echo 'true')
          git status

        # TODO: remove
      - name: Changeset output
        run: echo ${{steps.changesetVersion.outputs.changes}}

        # Get new version number
      - name: get-npm-version
        if: steps.changesetVersion.outputs.changes == 'true'
        id: package-version
        uses: martinbeentjes/npm-get-version-action@main
        with:
          path: ./packages/vscode-ui5-language-assistant

        # Apply changes and create version tag
      - name: Commit and push changes
        if: steps.changesetVersion.outputs.changes == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_PAT }}
        run: |
          echo ${{ steps.package-version.outputs.current-version}}
          git config user.name github-actions
          git config user.email github-actions@github.com
          git status
          git add -A
          git status
          git commit -m "chore: apply latest changesets" --no-verify || echo "No changesets found"
          git log --pretty=oneline | head -n 10
          git tag -a "v${{ steps.package-version.outputs.current-version}}" -m "v${{ steps.package-version.outputs.current-version}} release"
          git log --pretty=oneline | head -n 10
          git push 
          git push --tags
