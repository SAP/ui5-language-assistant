{
  "$schema-ref": "http://schemas.sap.com/sapui5/designtime/api.json/1.0",
  "version": "1.71.12",
  "library": "sap.ui.richtexteditor",
  "symbols": [
    {
      "kind": "namespace",
      "name": "sap.ui.richtexteditor",
      "basename": "richtexteditor",
      "resource": "sap/ui/richtexteditor/library.js",
      "module": "sap/ui/richtexteditor/library",
      "export": "",
      "static": true,
      "visibility": "public",
      "description": "A rich text editor (RTE) control. Requires installation of an additional rich text editor library."
    },
    {
      "kind": "enum",
      "name": "sap.ui.richtexteditor.EditorType",
      "basename": "EditorType",
      "resource": "sap/ui/richtexteditor/library.js",
      "module": "sap/ui/richtexteditor/library",
      "export": "EditorType",
      "static": true,
      "visibility": "public",
      "description": "Determines which editor component should be used for editing the text.",
      "ui5-metamodel": true,
      "properties": [
        {
          "name": "TinyMCE",
          "visibility": "public",
          "static": true,
          "type": "string",
          "description": "Uses TinyMCE version 3 as editor (default)"
        },
        {
          "name": "TinyMCE4",
          "visibility": "public",
          "static": true,
          "type": "string",
          "description": "Uses TinyMCE version 4 as editor"
        }
      ]
    },
    {
      "kind": "interface",
      "name": "sap.ui.richtexteditor.IToolbar",
      "basename": "IToolbar",
      "resource": "sap/ui/richtexteditor/library.js",
      "module": "sap/ui/richtexteditor/library",
      "export": "IToolbar",
      "static": true,
      "visibility": "public",
      "since": "1.50",
      "description": "Interface for controls which are suitable as a Toolbar for RichTextEditor.",
      "ui5-metamodel": true
    },
    {
      "kind": "class",
      "name": "sap.ui.richtexteditor.RichTextEditor",
      "basename": "RichTextEditor",
      "resource": "sap/ui/richtexteditor/RichTextEditor.js",
      "module": "sap/ui/richtexteditor/RichTextEditor",
      "export": "",
      "static": true,
      "visibility": "public",
      "extends": "sap.ui.core.Control",
      "description": "The RichTextEditor-Control is used to enter formatted text. It uses the third-party component called TinyMCE. In addition to the native toolbar, you can also use a toolbar built with SAPUI5 controls. <h3>Overview</h3>\n\nWith version 1.48 onward, aside from the native toolbar of the TinyMCE, the <code>RichTextEditor</code> can also use a toolbar built with SAPUI5 controls. Which toolbar is used is taken into consideration only while the control is being initialized and it will not be possible to change it during runtime, because of lifecycle incompatibilities between the SAPUI5 and the third-party library. The custom toolbar acts like a wrapper to the native toolbar and takes care of synchronizing the state of its internal controls with the current state of the selection in the editor (bold, italics, font styles etc.).\n\n<h4>Limitations</h4>\n\n<b>Note: The <code>RichTextEditor</code> uses a third-party component and therefore some additional limitations apply for its proper usage and support. For more information see the Preamble section in {@link topic:d4f3f1598373452bb73f2120930c133c sap.ui.richtexteditor}. </b>\n\n<h3>Guidelines</h3> <ul> <li> The <code>RichTextEditor</code> should be used for desktop apps only.</li> <li> In order to be usable, the control needs a minimum width 17.5 rem and height of 12.5 rem.</li> <li> Do not instantiate the <code>RichTextEditor</code> from a hidden container.</li> <li> Make sure you destroy the <code>RichTextEditor</code> instance instead of hiding it and create a new one when you show it again.</li> </ul>\n\n<h3>Usage</h3>\n\n<h4>When to use</h4> <ul> <li>You want to enable users to enter text and other elements (tables, images) with different styles and colors.</li> <li>You need to provide a tool for texts that require additional formatting.</li> </ul>\n\n<h4> When not to use</h4> <ul> <li>You want to let users add simple text that doesnâ€™t require formatting. Use {@link sap.m.TextArea text area} instead.</li> <li>Use callbacks to the native third-party API with care, as there may be compatibility issues with later versions.</li> </ul>",
      "ui5-metamodel": true,
      "ui5-metadata": {
        "stereotype": "control",
        "properties": [
          {
            "name": "value",
            "type": "string",
            "defaultValue": "",
            "group": "Data",
            "visibility": "public",
            "description": "An HTML string representing the editor content. Because this is HTML, the value cannot be generically escaped to prevent cross-site scripting, so the application is responsible for doing so. Overwriting this property would also reset editor's Undo manager and buttons \"Undo\"/\"Redo\" would be set to their initial state.",
            "methods": ["getValue", "setValue"]
          },
          {
            "name": "textDirection",
            "type": "sap.ui.core.TextDirection",
            "defaultValue": "Inherit",
            "group": "Appearance",
            "visibility": "public",
            "description": "The text direction",
            "methods": ["getTextDirection", "setTextDirection"]
          },
          {
            "name": "width",
            "type": "sap.ui.core.CSSSize",
            "defaultValue": null,
            "group": "Dimension",
            "visibility": "public",
            "description": "Width of RichTextEditor control in CSS units.",
            "methods": ["getWidth", "setWidth"]
          },
          {
            "name": "height",
            "type": "sap.ui.core.CSSSize",
            "defaultValue": null,
            "group": "Dimension",
            "visibility": "public",
            "description": "Height of RichTextEditor control in CSS units. <b>Note:</b> If the height property results in a value smaller than 200px, the minimum height of 200px will be applied.",
            "methods": ["getHeight", "setHeight"]
          },
          {
            "name": "editorType",
            "type": "string",
            "defaultValue": "TinyMCE4",
            "group": "Misc",
            "visibility": "public",
            "description": "The editor implementation to use.\n\nValid values are the ones found under sap.ui.richtexteditor.EditorType and any other editor identifier that may be introduced by other groups (hence this is not an enumeration).\n\n<b>Notes:</b> <ul><li>TinyMCE version 3 is no longer supported and cannot be used. If you set the property to TinyMCE, it will load TinyMCE version 4.</li> <li>Any attempts to set this property after the first rendering will not have any effect.</li></ul>",
            "methods": ["getEditorType", "setEditorType"]
          },
          {
            "name": "editorLocation",
            "type": "string",
            "defaultValue": "js/tiny_mce4/tinymce.js",
            "group": "Misc",
            "visibility": "public",
            "description": "Relative or absolute URL where the editor is available. Must be on the same server. <b>Note:</b> Any attempts to set this property after the first rendering will not have any effect.",
            "deprecated": {
              "since": "1.25.0",
              "text": "The editorLocation is set implicitly when choosing the editorType."
            },
            "methods": ["getEditorLocation", "setEditorLocation"]
          },
          {
            "name": "editable",
            "type": "boolean",
            "defaultValue": true,
            "group": "Misc",
            "visibility": "public",
            "description": "Determines whether the editor content can be modified by the user. When set to \"false\" there might not be any editor toolbar.",
            "methods": ["getEditable", "setEditable"]
          },
          {
            "name": "showGroupFontStyle",
            "type": "boolean",
            "defaultValue": true,
            "group": "Misc",
            "visibility": "public",
            "description": "Determines whether the toolbar button group containing commands like Bold, Italic, Underline and Strikethrough is available. Changing this after the initial rendering will result in some visible redrawing.",
            "methods": ["getShowGroupFontStyle", "setShowGroupFontStyle"]
          },
          {
            "name": "showGroupTextAlign",
            "type": "boolean",
            "defaultValue": true,
            "group": "Misc",
            "visibility": "public",
            "description": "Determines whether the toolbar button group containing text alignment commands is available. Changing this after the initial rendering will result in some visible redrawing.",
            "methods": ["getShowGroupTextAlign", "setShowGroupTextAlign"]
          },
          {
            "name": "showGroupStructure",
            "type": "boolean",
            "defaultValue": true,
            "group": "Misc",
            "visibility": "public",
            "description": "Determines whether the toolbar button group containing commands like Bullets and Indentation is available. Changing this after the initial rendering will result in some visible redrawing.",
            "methods": ["getShowGroupStructure", "setShowGroupStructure"]
          },
          {
            "name": "showGroupFont",
            "type": "boolean",
            "defaultValue": false,
            "group": "Misc",
            "visibility": "public",
            "description": "Determines whether the toolbar button group containing commands like Font, Font Size and Colors is available. Changing this after the initial rendering will result in some visible redrawing.",
            "methods": ["getShowGroupFont", "setShowGroupFont"]
          },
          {
            "name": "showGroupClipboard",
            "type": "boolean",
            "defaultValue": true,
            "group": "Misc",
            "visibility": "public",
            "description": "Determines whether the toolbar button group containing commands like Cut, Copy and Paste is available. Changing this after the initial rendering will result in some visible redrawing.",
            "methods": ["getShowGroupClipboard", "setShowGroupClipboard"]
          },
          {
            "name": "showGroupInsert",
            "type": "boolean",
            "defaultValue": false,
            "group": "Misc",
            "visibility": "public",
            "description": "Determines whether the toolbar button group containing commands like Insert Image and Insert Smiley is available. Changing this after the initial rendering will result in some visible redrawing.",
            "methods": ["getShowGroupInsert", "setShowGroupInsert"]
          },
          {
            "name": "showGroupLink",
            "type": "boolean",
            "defaultValue": false,
            "group": "Misc",
            "visibility": "public",
            "description": "Determines whether the toolbar button group containing commands like Create Link and Remove Link is available. Changing this after the initial rendering will result in some visible redrawing.",
            "methods": ["getShowGroupLink", "setShowGroupLink"]
          },
          {
            "name": "showGroupUndo",
            "type": "boolean",
            "defaultValue": false,
            "group": "Misc",
            "visibility": "public",
            "description": "Determines whether the toolbar button group containing commands like Undo and Redo is available. Changing this after the initial rendering will result in some visible redrawing.",
            "methods": ["getShowGroupUndo", "setShowGroupUndo"]
          },
          {
            "name": "wrapping",
            "type": "boolean",
            "defaultValue": true,
            "group": "Appearance",
            "visibility": "public",
            "description": "Determines whether the text in the editor is wrapped. This does not affect the editor's value, only the representation in the control.",
            "methods": ["getWrapping", "setWrapping"]
          },
          {
            "name": "required",
            "type": "boolean",
            "defaultValue": false,
            "group": "Misc",
            "visibility": "public",
            "description": "Determines whether a value is required.",
            "methods": ["getRequired", "setRequired"]
          },
          {
            "name": "sanitizeValue",
            "type": "boolean",
            "defaultValue": true,
            "group": "Misc",
            "visibility": "public",
            "description": "Determines whether to run the HTML sanitizer once the value (HTML markup) is applied or not. To configure allowed URLs please use the whitelist API via <code>jQuery.sap.addUrlWhitelist</code>",
            "methods": ["getSanitizeValue", "setSanitizeValue"]
          },
          {
            "name": "plugins",
            "type": "object[]",
            "defaultValue": "[]",
            "group": "Behavior",
            "visibility": "public",
            "description": "An array of plugin configuration objects with the obligatory property \"name\". Each object has to contain a property \"name\" which then contains the plugin name/ID.",
            "methods": ["getPlugins", "setPlugins"]
          },
          {
            "name": "useLegacyTheme",
            "type": "boolean",
            "defaultValue": true,
            "group": "Appearance",
            "visibility": "public",
            "description": "Determines whether or not to use the legacy theme for the toolbar buttons. If this is set to false, the default theme for the editor will be used (which might change slightly with every update). The legacy theme has the disadvantage that not all functionality has its own icon, so using non default buttons might lead to invisible buttons with the legacy theme - use the default editor theme in this case.",
            "methods": ["getUseLegacyTheme", "setUseLegacyTheme"]
          },
          {
            "name": "buttonGroups",
            "type": "object[]",
            "defaultValue": "[]",
            "group": "Behavior",
            "visibility": "public",
            "description": "An array of button configurations. These configurations contain the names of buttons as array in the property \"buttons\" and the name of the group in \"name\", they can also contain the \"row\" where the buttons should be placed, a \"priority\" and whether the buttons are \"visible\". See method addButtonGroup() for more details on the structure of the objects in this array.",
            "methods": ["getButtonGroups", "setButtonGroups"]
          },
          {
            "name": "customToolbar",
            "type": "boolean",
            "defaultValue": false,
            "group": "Misc",
            "visibility": "public",
            "since": "1.48",
            "description": "Determines whether a Fiori Toolbar is used instead of the TinyMCE default toolbar one. It is applied only when the EditorType is TinyMCE4 and sap.m library is loaded. <b>Note:</b> The <code>customToolbar</code> property will have effect only on initial loading. Changing it during runtime will not affect the initially loaded toolbar.",
            "methods": ["getCustomToolbar", "setCustomToolbar"]
          }
        ],
        "aggregations": [
          {
            "name": "_toolbarWrapper",
            "singularName": "_toolbarWrapper",
            "type": "sap.ui.richtexteditor.IToolbar",
            "cardinality": "0..1",
            "visibility": "hidden",
            "since": "1.48",
            "description": "Custom toolbar wrapper. The wrapper gets instantiated when customToolbar property is set to true.",
            "methods": [
              "get_toolbarWrapper",
              "destroy_toolbarWrapper",
              "set_toolbarWrapper"
            ]
          },
          {
            "name": "customButtons",
            "singularName": "customButton",
            "type": "sap.ui.core.Control",
            "cardinality": "0..n",
            "visibility": "public",
            "since": "1.48",
            "description": "Custom buttons are meant to extend the <code>RichTextEditor</code>'s custom toolbar. Though type is set to sap.ui.Control, only sap.m.Button is allowed. <b>Note:</b> customButtons are available only when the customToolbar is enabled and all the requirements are fulfilled.",
            "methods": [
              "getCustomButtons",
              "destroyCustomButtons",
              "insertCustomButton",
              "addCustomButton",
              "removeCustomButton",
              "indexOfCustomButton",
              "removeAllCustomButtons"
            ]
          }
        ],
        "events": [
          {
            "name": "change",
            "visibility": "public",
            "description": "Event is fired when the text in the field has changed AND the focus leaves the editor or when the Enter key is pressed.",
            "parameters": {
              "newValue": {
                "name": "newValue",
                "type": "string",
                "description": "The new control value."
              }
            },
            "methods": ["attachChange", "detachChange", "fireChange"]
          },
          {
            "name": "ready",
            "visibility": "public",
            "description": "Fired when the used editor is loaded and ready (its HTML is also created).",
            "methods": ["attachReady", "detachReady", "fireReady"]
          },
          {
            "name": "readyRecurring",
            "visibility": "public",
            "description": "Analogous to the ready event, the event is fired when the used editor is loaded and ready. But the event is fired after every time the control is ready to use and not only once like the ready event.",
            "methods": [
              "attachReadyRecurring",
              "detachReadyRecurring",
              "fireReadyRecurring"
            ]
          },
          {
            "name": "beforeEditorInit",
            "visibility": "public",
            "description": "This event is fired right before the TinyMCE instance is created and can be used to change the settings object that will be given to TinyMCE. The parameter \"configuration\" is the javascript oject that will be given to TinyMCE upon first instantiation. The configuration parameter contains a map that can be changed in the case of TinyMCE.",
            "methods": [
              "attachBeforeEditorInit",
              "detachBeforeEditorInit",
              "fireBeforeEditorInit"
            ]
          }
        ]
      },
      "constructor": {
        "visibility": "public",
        "parameters": [
          {
            "name": "sId",
            "type": "string",
            "optional": true,
            "description": "ID for the new control, generated automatically if no ID is given"
          },
          {
            "name": "mSettings",
            "type": "object",
            "optional": true,
            "description": "Initial settings for the new control"
          }
        ],
        "description": "Constructor for a new RichTextEditor.\n\nAccepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.",
        "references": [
          "{@link fiori:https://experience.sap.com/fiori-design-web/rich-text-editor/ Rich Text Editor}",
          "{@link topic:d4f3f1598373452bb73f2120930c133c}"
        ]
      },
      "events": [
        {
          "name": "beforeEditorInit",
          "visibility": "public",
          "parameters": [
            {
              "name": "oControlEvent",
              "type": "sap.ui.base.Event",
              "parameterProperties": {
                "getSource": {
                  "name": "getSource",
                  "type": "sap.ui.base.EventProvider",
                  "optional": false
                },
                "getParameters": {
                  "name": "getParameters",
                  "type": "object",
                  "optional": false
                }
              }
            }
          ],
          "description": "This event is fired right before the TinyMCE instance is created and can be used to change the settings object that will be given to TinyMCE. The parameter \"configuration\" is the javascript oject that will be given to TinyMCE upon first instantiation. The configuration parameter contains a map that can be changed in the case of TinyMCE."
        },
        {
          "name": "change",
          "visibility": "public",
          "parameters": [
            {
              "name": "oControlEvent",
              "type": "sap.ui.base.Event",
              "parameterProperties": {
                "getSource": {
                  "name": "getSource",
                  "type": "sap.ui.base.EventProvider",
                  "optional": false
                },
                "getParameters": {
                  "name": "getParameters",
                  "type": "object",
                  "optional": false,
                  "parameterProperties": {
                    "newValue": {
                      "name": "newValue",
                      "type": "string",
                      "optional": false,
                      "description": "The new control value."
                    }
                  }
                }
              }
            }
          ],
          "description": "Event is fired when the text in the field has changed AND the focus leaves the editor or when the Enter key is pressed."
        },
        {
          "name": "ready",
          "visibility": "public",
          "parameters": [
            {
              "name": "oControlEvent",
              "type": "sap.ui.base.Event",
              "parameterProperties": {
                "getSource": {
                  "name": "getSource",
                  "type": "sap.ui.base.EventProvider",
                  "optional": false
                },
                "getParameters": {
                  "name": "getParameters",
                  "type": "object",
                  "optional": false
                }
              }
            }
          ],
          "description": "Fired when the used editor is loaded and ready (its HTML is also created)."
        },
        {
          "name": "readyRecurring",
          "visibility": "public",
          "parameters": [
            {
              "name": "oControlEvent",
              "type": "sap.ui.base.Event",
              "parameterProperties": {
                "getSource": {
                  "name": "getSource",
                  "type": "sap.ui.base.EventProvider",
                  "optional": false
                },
                "getParameters": {
                  "name": "getParameters",
                  "type": "object",
                  "optional": false
                }
              }
            }
          ],
          "description": "Analogous to the ready event, the event is fired when the used editor is loaded and ready. But the event is fired after every time the control is ready to use and not only once like the ready event."
        }
      ],
      "methods": [
        {
          "name": "addButtonGroup",
          "visibility": "public",
          "returnValue": {
            "type": "object",
            "description": "Control instance (for method chaining)"
          },
          "parameters": [
            {
              "name": "mGroup",
              "type": "object|string",
              "optional": true,
              "parameterProperties": {
                "buttons": {
                  "name": "buttons",
                  "type": "string[]",
                  "optional": true,
                  "description": "Array of name/IDs of the buttons in the group"
                },
                "name": {
                  "name": "name",
                  "type": "string",
                  "optional": true,
                  "description": "Name/ID of the group."
                },
                "visible": {
                  "name": "visible",
                  "type": "boolean",
                  "optional": true,
                  "defaultValue": true,
                  "description": "(optional) The priority of the button group. Lower priorities are added first."
                },
                "row": {
                  "name": "row",
                  "type": "int",
                  "optional": true,
                  "defaultValue": 0,
                  "description": "(optional) Row number in which the button should be"
                },
                "priority": {
                  "name": "priority",
                  "type": "int",
                  "optional": true,
                  "defaultValue": 10,
                  "description": "(optional) The priority of the button group. Lower priorities are added first."
                },
                "customToolbarPriority": {
                  "name": "customToolbarPriority",
                  "type": "int",
                  "optional": true,
                  "description": "(optional) The priority of the button group in the custom toolbar. Each default group in the custom toolbar has a predefined <code>customToolbarPriority</code>. Lower priorities are added in first."
                }
              },
              "description": "Name/ID of a single button or object containing the group information"
            }
          ],
          "description": "Adds a button group to the editor."
        },
        {
          "name": "addCustomButton",
          "visibility": "public",
          "since": "1.48",
          "returnValue": {
            "type": "sap.ui.richtexteditor.RichTextEditor",
            "description": "Reference to <code>this</code> in order to allow method chaining"
          },
          "parameters": [
            {
              "name": "oCustomButton",
              "type": "sap.ui.core.Control",
              "optional": false,
              "description": "The customButton to add; if empty, nothing is inserted"
            }
          ],
          "description": "Adds some customButton to the aggregation {@link #getCustomButtons customButtons}."
        },
        {
          "name": "addPlugin",
          "visibility": "public",
          "returnValue": {
            "type": "object",
            "description": "Control instance (for method chaining)"
          },
          "parameters": [
            {
              "name": "mPlugin",
              "type": "object|string",
              "optional": true,
              "description": "The plugin ID/name or an object with property \"name\", containing the ID/name of the plugin"
            }
          ],
          "description": "Allows to add a plugin (that must already be installed on the server) to the RichTextEditor."
        },
        {
          "name": "attachBeforeEditorInit",
          "visibility": "public",
          "returnValue": {
            "type": "sap.ui.richtexteditor.RichTextEditor",
            "description": "Reference to <code>this</code> in order to allow method chaining"
          },
          "parameters": [
            {
              "name": "oData",
              "type": "object",
              "optional": true,
              "description": "An application-specific payload object that will be passed to the event handler along with the event object when firing the event"
            },
            {
              "name": "fnFunction",
              "type": "function",
              "optional": false,
              "description": "The function to be called when the event occurs"
            },
            {
              "name": "oListener",
              "type": "object",
              "optional": true,
              "description": "Context object to call the event handler with. Defaults to this <code>sap.ui.richtexteditor.RichTextEditor</code> itself"
            }
          ],
          "description": "Attaches event handler <code>fnFunction</code> to the {@link #event:beforeEditorInit beforeEditorInit} event of this <code>sap.ui.richtexteditor.RichTextEditor</code>.\n\nWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.ui.richtexteditor.RichTextEditor</code> itself.\n\nThis event is fired right before the TinyMCE instance is created and can be used to change the settings object that will be given to TinyMCE. The parameter \"configuration\" is the javascript oject that will be given to TinyMCE upon first instantiation. The configuration parameter contains a map that can be changed in the case of TinyMCE."
        },
        {
          "name": "attachChange",
          "visibility": "public",
          "returnValue": {
            "type": "sap.ui.richtexteditor.RichTextEditor",
            "description": "Reference to <code>this</code> in order to allow method chaining"
          },
          "parameters": [
            {
              "name": "oData",
              "type": "object",
              "optional": true,
              "description": "An application-specific payload object that will be passed to the event handler along with the event object when firing the event"
            },
            {
              "name": "fnFunction",
              "type": "function",
              "optional": false,
              "description": "The function to be called when the event occurs"
            },
            {
              "name": "oListener",
              "type": "object",
              "optional": true,
              "description": "Context object to call the event handler with. Defaults to this <code>sap.ui.richtexteditor.RichTextEditor</code> itself"
            }
          ],
          "description": "Attaches event handler <code>fnFunction</code> to the {@link #event:change change} event of this <code>sap.ui.richtexteditor.RichTextEditor</code>.\n\nWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.ui.richtexteditor.RichTextEditor</code> itself.\n\nEvent is fired when the text in the field has changed AND the focus leaves the editor or when the Enter key is pressed."
        },
        {
          "name": "attachReady",
          "visibility": "public",
          "returnValue": {
            "type": "sap.ui.richtexteditor.RichTextEditor",
            "description": "Reference to <code>this</code> in order to allow method chaining"
          },
          "parameters": [
            {
              "name": "oData",
              "type": "object",
              "optional": true,
              "description": "An application-specific payload object that will be passed to the event handler along with the event object when firing the event"
            },
            {
              "name": "fnFunction",
              "type": "function",
              "optional": false,
              "description": "The function to be called when the event occurs"
            },
            {
              "name": "oListener",
              "type": "object",
              "optional": true,
              "description": "Context object to call the event handler with. Defaults to this <code>sap.ui.richtexteditor.RichTextEditor</code> itself"
            }
          ],
          "description": "Attaches event handler <code>fnFunction</code> to the {@link #event:ready ready} event of this <code>sap.ui.richtexteditor.RichTextEditor</code>.\n\nWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.ui.richtexteditor.RichTextEditor</code> itself.\n\nFired when the used editor is loaded and ready (its HTML is also created)."
        },
        {
          "name": "attachReadyRecurring",
          "visibility": "public",
          "returnValue": {
            "type": "sap.ui.richtexteditor.RichTextEditor",
            "description": "Reference to <code>this</code> in order to allow method chaining"
          },
          "parameters": [
            {
              "name": "oData",
              "type": "object",
              "optional": true,
              "description": "An application-specific payload object that will be passed to the event handler along with the event object when firing the event"
            },
            {
              "name": "fnFunction",
              "type": "function",
              "optional": false,
              "description": "The function to be called when the event occurs"
            },
            {
              "name": "oListener",
              "type": "object",
              "optional": true,
              "description": "Context object to call the event handler with. Defaults to this <code>sap.ui.richtexteditor.RichTextEditor</code> itself"
            }
          ],
          "description": "Attaches event handler <code>fnFunction</code> to the {@link #event:readyRecurring readyRecurring} event of this <code>sap.ui.richtexteditor.RichTextEditor</code>.\n\nWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.ui.richtexteditor.RichTextEditor</code> itself.\n\nAnalogous to the ready event, the event is fired when the used editor is loaded and ready. But the event is fired after every time the control is ready to use and not only once like the ready event."
        },
        {
          "name": "destroyCustomButtons",
          "visibility": "public",
          "since": "1.48",
          "returnValue": {
            "type": "sap.ui.richtexteditor.RichTextEditor",
            "description": "Reference to <code>this</code> in order to allow method chaining"
          },
          "description": "Destroys all the customButtons in the aggregation {@link #getCustomButtons customButtons}."
        },
        {
          "name": "detachBeforeEditorInit",
          "visibility": "public",
          "returnValue": {
            "type": "sap.ui.richtexteditor.RichTextEditor",
            "description": "Reference to <code>this</code> in order to allow method chaining"
          },
          "parameters": [
            {
              "name": "fnFunction",
              "type": "function",
              "optional": false,
              "description": "The function to be called, when the event occurs"
            },
            {
              "name": "oListener",
              "type": "object",
              "optional": true,
              "description": "Context object on which the given function had to be called"
            }
          ],
          "description": "Detaches event handler <code>fnFunction</code> from the {@link #event:beforeEditorInit beforeEditorInit} event of this <code>sap.ui.richtexteditor.RichTextEditor</code>.\n\nThe passed function and listener object must match the ones used for event registration."
        },
        {
          "name": "detachChange",
          "visibility": "public",
          "returnValue": {
            "type": "sap.ui.richtexteditor.RichTextEditor",
            "description": "Reference to <code>this</code> in order to allow method chaining"
          },
          "parameters": [
            {
              "name": "fnFunction",
              "type": "function",
              "optional": false,
              "description": "The function to be called, when the event occurs"
            },
            {
              "name": "oListener",
              "type": "object",
              "optional": true,
              "description": "Context object on which the given function had to be called"
            }
          ],
          "description": "Detaches event handler <code>fnFunction</code> from the {@link #event:change change} event of this <code>sap.ui.richtexteditor.RichTextEditor</code>.\n\nThe passed function and listener object must match the ones used for event registration."
        },
        {
          "name": "detachReady",
          "visibility": "public",
          "returnValue": {
            "type": "sap.ui.richtexteditor.RichTextEditor",
            "description": "Reference to <code>this</code> in order to allow method chaining"
          },
          "parameters": [
            {
              "name": "fnFunction",
              "type": "function",
              "optional": false,
              "description": "The function to be called, when the event occurs"
            },
            {
              "name": "oListener",
              "type": "object",
              "optional": true,
              "description": "Context object on which the given function had to be called"
            }
          ],
          "description": "Detaches event handler <code>fnFunction</code> from the {@link #event:ready ready} event of this <code>sap.ui.richtexteditor.RichTextEditor</code>.\n\nThe passed function and listener object must match the ones used for event registration."
        },
        {
          "name": "detachReadyRecurring",
          "visibility": "public",
          "returnValue": {
            "type": "sap.ui.richtexteditor.RichTextEditor",
            "description": "Reference to <code>this</code> in order to allow method chaining"
          },
          "parameters": [
            {
              "name": "fnFunction",
              "type": "function",
              "optional": false,
              "description": "The function to be called, when the event occurs"
            },
            {
              "name": "oListener",
              "type": "object",
              "optional": true,
              "description": "Context object on which the given function had to be called"
            }
          ],
          "description": "Detaches event handler <code>fnFunction</code> from the {@link #event:readyRecurring readyRecurring} event of this <code>sap.ui.richtexteditor.RichTextEditor</code>.\n\nThe passed function and listener object must match the ones used for event registration."
        },
        {
          "name": "extend",
          "visibility": "public",
          "static": true,
          "returnValue": {
            "type": "function",
            "description": "Created class / constructor function"
          },
          "parameters": [
            {
              "name": "sClassName",
              "type": "string",
              "optional": false,
              "description": "Name of the class being created"
            },
            {
              "name": "oClassInfo",
              "type": "object",
              "optional": true,
              "description": "Object literal with information about the class"
            },
            {
              "name": "FNMetaImpl",
              "type": "function",
              "optional": true,
              "description": "Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>"
            }
          ],
          "description": "Creates a new subclass of class sap.ui.richtexteditor.RichTextEditor with name <code>sClassName</code> and enriches it with the information contained in <code>oClassInfo</code>.\n\n<code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}."
        },
        {
          "name": "fireBeforeEditorInit",
          "visibility": "protected",
          "returnValue": {
            "type": "sap.ui.richtexteditor.RichTextEditor",
            "description": "Reference to <code>this</code> in order to allow method chaining"
          },
          "parameters": [
            {
              "name": "mParameters",
              "type": "object",
              "optional": true,
              "description": "Parameters to pass along with the event"
            }
          ],
          "description": "Fires event {@link #event:beforeEditorInit beforeEditorInit} to attached listeners."
        },
        {
          "name": "fireChange",
          "visibility": "protected",
          "returnValue": {
            "type": "sap.ui.richtexteditor.RichTextEditor",
            "description": "Reference to <code>this</code> in order to allow method chaining"
          },
          "parameters": [
            {
              "name": "mParameters",
              "type": "object",
              "optional": true,
              "parameterProperties": {
                "newValue": {
                  "name": "newValue",
                  "type": "string",
                  "optional": true,
                  "description": "The new control value."
                }
              },
              "description": "Parameters to pass along with the event"
            }
          ],
          "description": "Fires event {@link #event:change change} to attached listeners."
        },
        {
          "name": "fireReady",
          "visibility": "protected",
          "returnValue": {
            "type": "sap.ui.richtexteditor.RichTextEditor",
            "description": "Reference to <code>this</code> in order to allow method chaining"
          },
          "parameters": [
            {
              "name": "mParameters",
              "type": "object",
              "optional": true,
              "description": "Parameters to pass along with the event"
            }
          ],
          "description": "Fires event {@link #event:ready ready} to attached listeners."
        },
        {
          "name": "fireReadyRecurring",
          "visibility": "protected",
          "returnValue": {
            "type": "sap.ui.richtexteditor.RichTextEditor",
            "description": "Reference to <code>this</code> in order to allow method chaining"
          },
          "parameters": [
            {
              "name": "mParameters",
              "type": "object",
              "optional": true,
              "description": "Parameters to pass along with the event"
            }
          ],
          "description": "Fires event {@link #event:readyRecurring readyRecurring} to attached listeners."
        },
        {
          "name": "getButtonGroups",
          "visibility": "public",
          "returnValue": {
            "type": "object[]",
            "description": "Value of property <code>buttonGroups</code>"
          },
          "description": "Gets current value of property {@link #getButtonGroups buttonGroups}.\n\nAn array of button configurations. These configurations contain the names of buttons as array in the property \"buttons\" and the name of the group in \"name\", they can also contain the \"row\" where the buttons should be placed, a \"priority\" and whether the buttons are \"visible\". See method addButtonGroup() for more details on the structure of the objects in this array.\n\nDefault value is <code>[]</code>."
        },
        {
          "name": "getCustomButtons",
          "visibility": "public",
          "since": "1.48",
          "returnValue": { "type": "sap.ui.core.Control[]" },
          "description": "Gets content of aggregation {@link #getCustomButtons customButtons}.\n\nCustom buttons are meant to extend the <code>RichTextEditor</code>'s custom toolbar. Though type is set to sap.ui.Control, only sap.m.Button is allowed. <b>Note:</b> customButtons are available only when the customToolbar is enabled and all the requirements are fulfilled."
        },
        {
          "name": "getCustomToolbar",
          "visibility": "public",
          "since": "1.48",
          "returnValue": {
            "type": "boolean",
            "description": "Value of property <code>customToolbar</code>"
          },
          "description": "Gets current value of property {@link #getCustomToolbar customToolbar}.\n\nDetermines whether a Fiori Toolbar is used instead of the TinyMCE default toolbar one. It is applied only when the EditorType is TinyMCE4 and sap.m library is loaded. <b>Note:</b> The <code>customToolbar</code> property will have effect only on initial loading. Changing it during runtime will not affect the initially loaded toolbar.\n\nDefault value is <code>false</code>."
        },
        {
          "name": "getEditable",
          "visibility": "public",
          "returnValue": {
            "type": "boolean",
            "description": "Value of property <code>editable</code>"
          },
          "description": "Gets current value of property {@link #getEditable editable}.\n\nDetermines whether the editor content can be modified by the user. When set to \"false\" there might not be any editor toolbar.\n\nDefault value is <code>true</code>."
        },
        {
          "name": "getEditorLocation",
          "visibility": "public",
          "returnValue": {
            "type": "string",
            "description": "Value of property <code>editorLocation</code>"
          },
          "description": "Gets current value of property {@link #getEditorLocation editorLocation}.\n\nRelative or absolute URL where the editor is available. Must be on the same server. <b>Note:</b> Any attempts to set this property after the first rendering will not have any effect.\n\nDefault value is <code>js/tiny_mce4/tinymce.js</code>.",
          "deprecated": {
            "since": "1.25.0",
            "text": "The editorLocation is set implicitly when choosing the editorType."
          }
        },
        {
          "name": "getEditorType",
          "visibility": "public",
          "returnValue": {
            "type": "string",
            "description": "Value of property <code>editorType</code>"
          },
          "description": "Gets current value of property {@link #getEditorType editorType}.\n\nThe editor implementation to use.\n\nValid values are the ones found under sap.ui.richtexteditor.EditorType and any other editor identifier that may be introduced by other groups (hence this is not an enumeration).\n\n<b>Notes:</b> <ul><li>TinyMCE version 3 is no longer supported and cannot be used. If you set the property to TinyMCE, it will load TinyMCE version 4.</li> <li>Any attempts to set this property after the first rendering will not have any effect.</li></ul>\n\nDefault value is <code>TinyMCE4</code>."
        },
        {
          "name": "getHeight",
          "visibility": "public",
          "returnValue": {
            "type": "sap.ui.core.CSSSize",
            "description": "Value of property <code>height</code>"
          },
          "description": "Gets current value of property {@link #getHeight height}.\n\nHeight of RichTextEditor control in CSS units. <b>Note:</b> If the height property results in a value smaller than 200px, the minimum height of 200px will be applied."
        },
        {
          "name": "getMetadata",
          "visibility": "public",
          "static": true,
          "returnValue": {
            "type": "sap.ui.base.Metadata",
            "description": "Metadata object describing this class"
          },
          "description": "Returns a metadata object for class sap.ui.richtexteditor.RichTextEditor."
        },
        {
          "name": "getNativeApi",
          "visibility": "public",
          "ui5-metamodel": true,
          "returnValue": {
            "type": "object",
            "description": "The native editor object (here: The TinyMCE editor instance)"
          },
          "description": "Returns the current editor's instance. CAUTION: using the native editor introduces a dependency to that editor and breaks the wrapping character of the RichTextEditor control, so it should only be done in justified cases."
        },
        {
          "name": "getPlugins",
          "visibility": "public",
          "returnValue": {
            "type": "object[]",
            "description": "Value of property <code>plugins</code>"
          },
          "description": "Gets current value of property {@link #getPlugins plugins}.\n\nAn array of plugin configuration objects with the obligatory property \"name\". Each object has to contain a property \"name\" which then contains the plugin name/ID.\n\nDefault value is <code>[]</code>."
        },
        {
          "name": "getRequired",
          "visibility": "public",
          "returnValue": {
            "type": "boolean",
            "description": "Value of property <code>required</code>"
          },
          "description": "Gets current value of property {@link #getRequired required}.\n\nDetermines whether a value is required.\n\nDefault value is <code>false</code>."
        },
        {
          "name": "getSanitizeValue",
          "visibility": "public",
          "returnValue": {
            "type": "boolean",
            "description": "Value of property <code>sanitizeValue</code>"
          },
          "description": "Gets current value of property {@link #getSanitizeValue sanitizeValue}.\n\nDetermines whether to run the HTML sanitizer once the value (HTML markup) is applied or not. To configure allowed URLs please use the whitelist API via <code>jQuery.sap.addUrlWhitelist</code>\n\nDefault value is <code>true</code>."
        },
        {
          "name": "getShowGroupClipboard",
          "visibility": "public",
          "returnValue": {
            "type": "boolean",
            "description": "Value of property <code>showGroupClipboard</code>"
          },
          "description": "Gets current value of property {@link #getShowGroupClipboard showGroupClipboard}.\n\nDetermines whether the toolbar button group containing commands like Cut, Copy and Paste is available. Changing this after the initial rendering will result in some visible redrawing.\n\nDefault value is <code>true</code>."
        },
        {
          "name": "getShowGroupFont",
          "visibility": "public",
          "returnValue": {
            "type": "boolean",
            "description": "Value of property <code>showGroupFont</code>"
          },
          "description": "Gets current value of property {@link #getShowGroupFont showGroupFont}.\n\nDetermines whether the toolbar button group containing commands like Font, Font Size and Colors is available. Changing this after the initial rendering will result in some visible redrawing.\n\nDefault value is <code>false</code>."
        },
        {
          "name": "getShowGroupFontStyle",
          "visibility": "public",
          "returnValue": {
            "type": "boolean",
            "description": "Value of property <code>showGroupFontStyle</code>"
          },
          "description": "Gets current value of property {@link #getShowGroupFontStyle showGroupFontStyle}.\n\nDetermines whether the toolbar button group containing commands like Bold, Italic, Underline and Strikethrough is available. Changing this after the initial rendering will result in some visible redrawing.\n\nDefault value is <code>true</code>."
        },
        {
          "name": "getShowGroupInsert",
          "visibility": "public",
          "returnValue": {
            "type": "boolean",
            "description": "Value of property <code>showGroupInsert</code>"
          },
          "description": "Gets current value of property {@link #getShowGroupInsert showGroupInsert}.\n\nDetermines whether the toolbar button group containing commands like Insert Image and Insert Smiley is available. Changing this after the initial rendering will result in some visible redrawing.\n\nDefault value is <code>false</code>."
        },
        {
          "name": "getShowGroupLink",
          "visibility": "public",
          "returnValue": {
            "type": "boolean",
            "description": "Value of property <code>showGroupLink</code>"
          },
          "description": "Gets current value of property {@link #getShowGroupLink showGroupLink}.\n\nDetermines whether the toolbar button group containing commands like Create Link and Remove Link is available. Changing this after the initial rendering will result in some visible redrawing.\n\nDefault value is <code>false</code>."
        },
        {
          "name": "getShowGroupStructure",
          "visibility": "public",
          "returnValue": {
            "type": "boolean",
            "description": "Value of property <code>showGroupStructure</code>"
          },
          "description": "Gets current value of property {@link #getShowGroupStructure showGroupStructure}.\n\nDetermines whether the toolbar button group containing commands like Bullets and Indentation is available. Changing this after the initial rendering will result in some visible redrawing.\n\nDefault value is <code>true</code>."
        },
        {
          "name": "getShowGroupTextAlign",
          "visibility": "public",
          "returnValue": {
            "type": "boolean",
            "description": "Value of property <code>showGroupTextAlign</code>"
          },
          "description": "Gets current value of property {@link #getShowGroupTextAlign showGroupTextAlign}.\n\nDetermines whether the toolbar button group containing text alignment commands is available. Changing this after the initial rendering will result in some visible redrawing.\n\nDefault value is <code>true</code>."
        },
        {
          "name": "getShowGroupUndo",
          "visibility": "public",
          "returnValue": {
            "type": "boolean",
            "description": "Value of property <code>showGroupUndo</code>"
          },
          "description": "Gets current value of property {@link #getShowGroupUndo showGroupUndo}.\n\nDetermines whether the toolbar button group containing commands like Undo and Redo is available. Changing this after the initial rendering will result in some visible redrawing.\n\nDefault value is <code>false</code>."
        },
        {
          "name": "getTextDirection",
          "visibility": "public",
          "returnValue": {
            "type": "sap.ui.core.TextDirection",
            "description": "Value of property <code>textDirection</code>"
          },
          "description": "Gets current value of property {@link #getTextDirection textDirection}.\n\nThe text direction\n\nDefault value is <code>Inherit</code>."
        },
        {
          "name": "getUseLegacyTheme",
          "visibility": "public",
          "returnValue": {
            "type": "boolean",
            "description": "Value of property <code>useLegacyTheme</code>"
          },
          "description": "Gets current value of property {@link #getUseLegacyTheme useLegacyTheme}.\n\nDetermines whether or not to use the legacy theme for the toolbar buttons. If this is set to false, the default theme for the editor will be used (which might change slightly with every update). The legacy theme has the disadvantage that not all functionality has its own icon, so using non default buttons might lead to invisible buttons with the legacy theme - use the default editor theme in this case.\n\nDefault value is <code>true</code>."
        },
        {
          "name": "getValue",
          "visibility": "public",
          "returnValue": {
            "type": "string",
            "description": "Value of property <code>value</code>"
          },
          "description": "Gets current value of property {@link #getValue value}.\n\nAn HTML string representing the editor content. Because this is HTML, the value cannot be generically escaped to prevent cross-site scripting, so the application is responsible for doing so. Overwriting this property would also reset editor's Undo manager and buttons \"Undo\"/\"Redo\" would be set to their initial state.\n\nDefault value is <code>empty string</code>."
        },
        {
          "name": "getWidth",
          "visibility": "public",
          "returnValue": {
            "type": "sap.ui.core.CSSSize",
            "description": "Value of property <code>width</code>"
          },
          "description": "Gets current value of property {@link #getWidth width}.\n\nWidth of RichTextEditor control in CSS units."
        },
        {
          "name": "getWrapping",
          "visibility": "public",
          "returnValue": {
            "type": "boolean",
            "description": "Value of property <code>wrapping</code>"
          },
          "description": "Gets current value of property {@link #getWrapping wrapping}.\n\nDetermines whether the text in the editor is wrapped. This does not affect the editor's value, only the representation in the control.\n\nDefault value is <code>true</code>."
        },
        {
          "name": "indexOfCustomButton",
          "visibility": "public",
          "since": "1.48",
          "returnValue": {
            "type": "int",
            "description": "The index of the provided control in the aggregation if found, or -1 otherwise"
          },
          "parameters": [
            {
              "name": "oCustomButton",
              "type": "sap.ui.core.Control",
              "optional": false,
              "description": "The customButton whose index is looked for"
            }
          ],
          "description": "Checks for the provided <code>sap.ui.core.Control</code> in the aggregation {@link #getCustomButtons customButtons}. and returns its index if found or -1 otherwise."
        },
        {
          "name": "insertCustomButton",
          "visibility": "public",
          "since": "1.48",
          "returnValue": {
            "type": "sap.ui.richtexteditor.RichTextEditor",
            "description": "Reference to <code>this</code> in order to allow method chaining"
          },
          "parameters": [
            {
              "name": "oCustomButton",
              "type": "sap.ui.core.Control",
              "optional": false,
              "description": "The customButton to insert; if empty, nothing is inserted"
            },
            {
              "name": "iIndex",
              "type": "int",
              "optional": false,
              "description": "The <code>0</code>-based index the customButton should be inserted at; for a negative value of <code>iIndex</code>, the customButton is inserted at position 0; for a value greater than the current size of the aggregation, the customButton is inserted at the last position"
            }
          ],
          "description": "Inserts a customButton into the aggregation {@link #getCustomButtons customButtons}."
        },
        {
          "name": "removeAllCustomButtons",
          "visibility": "public",
          "since": "1.48",
          "returnValue": {
            "type": "sap.ui.core.Control[]",
            "description": "An array of the removed elements (might be empty)"
          },
          "description": "Removes all the controls from the aggregation {@link #getCustomButtons customButtons}.\n\nAdditionally, it unregisters them from the hosting UIArea."
        },
        {
          "name": "removeCustomButton",
          "visibility": "public",
          "since": "1.48",
          "returnValue": {
            "type": "sap.ui.core.Control",
            "description": "The removed customButton or <code>null</code>"
          },
          "parameters": [
            {
              "name": "vCustomButton",
              "type": "int|string|sap.ui.core.Control",
              "optional": false,
              "description": "The customButton to remove or its index or id"
            }
          ],
          "description": "Removes a customButton from the aggregation {@link #getCustomButtons customButtons}."
        },
        {
          "name": "removePlugin",
          "visibility": "public",
          "returnValue": {
            "type": "object",
            "description": "Control instance (for method chaining)"
          },
          "parameters": [
            {
              "name": "sPluginName",
              "type": "string",
              "optional": true,
              "description": "The name/ID of the plugin to remove"
            }
          ],
          "description": "Removes the plugin with the given name/ID from the list of plugins to load"
        },
        {
          "name": "setButtonGroups",
          "visibility": "public",
          "returnValue": {
            "type": "object",
            "description": "Control instance (for method chaining)"
          },
          "parameters": [
            {
              "name": "aGroups",
              "type": "array",
              "optional": true,
              "description": "Array of names or objects containing the group information"
            }
          ],
          "description": "Sets the button groups to the editor."
        },
        {
          "name": "setCustomToolbar",
          "visibility": "public",
          "since": "1.48",
          "returnValue": {
            "type": "sap.ui.richtexteditor.RichTextEditor",
            "description": "Reference to <code>this</code> in order to allow method chaining"
          },
          "parameters": [
            {
              "name": "bCustomToolbar",
              "type": "boolean",
              "optional": false,
              "description": "New value for property <code>customToolbar</code>"
            }
          ],
          "description": "Sets a new value for property {@link #getCustomToolbar customToolbar}.\n\nDetermines whether a Fiori Toolbar is used instead of the TinyMCE default toolbar one. It is applied only when the EditorType is TinyMCE4 and sap.m library is loaded. <b>Note:</b> The <code>customToolbar</code> property will have effect only on initial loading. Changing it during runtime will not affect the initially loaded toolbar.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>false</code>."
        },
        {
          "name": "setEditable",
          "visibility": "public",
          "returnValue": {
            "type": "sap.ui.richtexteditor.RichTextEditor",
            "description": "Reference to <code>this</code> in order to allow method chaining"
          },
          "parameters": [
            {
              "name": "bEditable",
              "type": "boolean",
              "optional": false,
              "description": "New value for property <code>editable</code>"
            }
          ],
          "description": "Sets a new value for property {@link #getEditable editable}.\n\nDetermines whether the editor content can be modified by the user. When set to \"false\" there might not be any editor toolbar.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>true</code>."
        },
        {
          "name": "setEditorLocation",
          "visibility": "public",
          "returnValue": {
            "type": "sap.ui.richtexteditor.RichTextEditor",
            "description": "Reference to <code>this</code> in order to allow method chaining"
          },
          "parameters": [
            {
              "name": "sEditorLocation",
              "type": "string",
              "optional": false,
              "description": "New value for property <code>editorLocation</code>"
            }
          ],
          "description": "Sets a new value for property {@link #getEditorLocation editorLocation}.\n\nRelative or absolute URL where the editor is available. Must be on the same server. <b>Note:</b> Any attempts to set this property after the first rendering will not have any effect.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>js/tiny_mce4/tinymce.js</code>.",
          "deprecated": {
            "since": "1.25.0",
            "text": "The editorLocation is set implicitly when choosing the editorType."
          }
        },
        {
          "name": "setEditorType",
          "visibility": "public",
          "returnValue": {
            "type": "object",
            "description": "Control instance (for method chaining)"
          },
          "parameters": [
            {
              "name": "sEditorType",
              "type": "string",
              "optional": true,
              "description": "Which editor type to be used (currently only TinyMCE 3 and 4)"
            }
          ],
          "description": "Switches the editor type and sets the default settings for the editor. All plugins and button groups should be set after this has been invoked"
        },
        {
          "name": "setHeight",
          "visibility": "public",
          "returnValue": {
            "type": "sap.ui.richtexteditor.RichTextEditor",
            "description": "Reference to <code>this</code> in order to allow method chaining"
          },
          "parameters": [
            {
              "name": "sHeight",
              "type": "sap.ui.core.CSSSize",
              "optional": false,
              "description": "New value for property <code>height</code>"
            }
          ],
          "description": "Sets a new value for property {@link #getHeight height}.\n\nHeight of RichTextEditor control in CSS units. <b>Note:</b> If the height property results in a value smaller than 200px, the minimum height of 200px will be applied.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored."
        },
        {
          "name": "setPlugins",
          "visibility": "public",
          "returnValue": {
            "type": "sap.ui.richtexteditor.RichTextEditor",
            "description": "Reference to <code>this</code> in order to allow method chaining"
          },
          "parameters": [
            {
              "name": "sPlugins",
              "type": "object[]",
              "optional": false,
              "description": "New value for property <code>plugins</code>"
            }
          ],
          "description": "Sets a new value for property {@link #getPlugins plugins}.\n\nAn array of plugin configuration objects with the obligatory property \"name\". Each object has to contain a property \"name\" which then contains the plugin name/ID.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>[]</code>."
        },
        {
          "name": "setRequired",
          "visibility": "public",
          "returnValue": {
            "type": "sap.ui.richtexteditor.RichTextEditor",
            "description": "Reference to <code>this</code> in order to allow method chaining"
          },
          "parameters": [
            {
              "name": "bRequired",
              "type": "boolean",
              "optional": false,
              "description": "New value for property <code>required</code>"
            }
          ],
          "description": "Sets a new value for property {@link #getRequired required}.\n\nDetermines whether a value is required.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>false</code>."
        },
        {
          "name": "setSanitizeValue",
          "visibility": "public",
          "returnValue": {
            "type": "sap.ui.richtexteditor.RichTextEditor",
            "description": "Reference to <code>this</code> in order to allow method chaining"
          },
          "parameters": [
            {
              "name": "bSanitizeValue",
              "type": "boolean",
              "optional": false,
              "description": "New value for property <code>sanitizeValue</code>"
            }
          ],
          "description": "Sets a new value for property {@link #getSanitizeValue sanitizeValue}.\n\nDetermines whether to run the HTML sanitizer once the value (HTML markup) is applied or not. To configure allowed URLs please use the whitelist API via <code>jQuery.sap.addUrlWhitelist</code>\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>true</code>."
        },
        {
          "name": "setShowGroupClipboard",
          "visibility": "public",
          "returnValue": {
            "type": "sap.ui.richtexteditor.RichTextEditor",
            "description": "Reference to <code>this</code> in order to allow method chaining"
          },
          "parameters": [
            {
              "name": "bShowGroupClipboard",
              "type": "boolean",
              "optional": false,
              "description": "New value for property <code>showGroupClipboard</code>"
            }
          ],
          "description": "Sets a new value for property {@link #getShowGroupClipboard showGroupClipboard}.\n\nDetermines whether the toolbar button group containing commands like Cut, Copy and Paste is available. Changing this after the initial rendering will result in some visible redrawing.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>true</code>."
        },
        {
          "name": "setShowGroupFont",
          "visibility": "public",
          "returnValue": {
            "type": "sap.ui.richtexteditor.RichTextEditor",
            "description": "Reference to <code>this</code> in order to allow method chaining"
          },
          "parameters": [
            {
              "name": "bShowGroupFont",
              "type": "boolean",
              "optional": false,
              "description": "New value for property <code>showGroupFont</code>"
            }
          ],
          "description": "Sets a new value for property {@link #getShowGroupFont showGroupFont}.\n\nDetermines whether the toolbar button group containing commands like Font, Font Size and Colors is available. Changing this after the initial rendering will result in some visible redrawing.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>false</code>."
        },
        {
          "name": "setShowGroupFontStyle",
          "visibility": "public",
          "returnValue": {
            "type": "sap.ui.richtexteditor.RichTextEditor",
            "description": "Reference to <code>this</code> in order to allow method chaining"
          },
          "parameters": [
            {
              "name": "bShowGroupFontStyle",
              "type": "boolean",
              "optional": false,
              "description": "New value for property <code>showGroupFontStyle</code>"
            }
          ],
          "description": "Sets a new value for property {@link #getShowGroupFontStyle showGroupFontStyle}.\n\nDetermines whether the toolbar button group containing commands like Bold, Italic, Underline and Strikethrough is available. Changing this after the initial rendering will result in some visible redrawing.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>true</code>."
        },
        {
          "name": "setShowGroupInsert",
          "visibility": "public",
          "returnValue": {
            "type": "sap.ui.richtexteditor.RichTextEditor",
            "description": "Reference to <code>this</code> in order to allow method chaining"
          },
          "parameters": [
            {
              "name": "bShowGroupInsert",
              "type": "boolean",
              "optional": false,
              "description": "New value for property <code>showGroupInsert</code>"
            }
          ],
          "description": "Sets a new value for property {@link #getShowGroupInsert showGroupInsert}.\n\nDetermines whether the toolbar button group containing commands like Insert Image and Insert Smiley is available. Changing this after the initial rendering will result in some visible redrawing.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>false</code>."
        },
        {
          "name": "setShowGroupLink",
          "visibility": "public",
          "returnValue": {
            "type": "sap.ui.richtexteditor.RichTextEditor",
            "description": "Reference to <code>this</code> in order to allow method chaining"
          },
          "parameters": [
            {
              "name": "bShowGroupLink",
              "type": "boolean",
              "optional": false,
              "description": "New value for property <code>showGroupLink</code>"
            }
          ],
          "description": "Sets a new value for property {@link #getShowGroupLink showGroupLink}.\n\nDetermines whether the toolbar button group containing commands like Create Link and Remove Link is available. Changing this after the initial rendering will result in some visible redrawing.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>false</code>."
        },
        {
          "name": "setShowGroupStructure",
          "visibility": "public",
          "returnValue": {
            "type": "sap.ui.richtexteditor.RichTextEditor",
            "description": "Reference to <code>this</code> in order to allow method chaining"
          },
          "parameters": [
            {
              "name": "bShowGroupStructure",
              "type": "boolean",
              "optional": false,
              "description": "New value for property <code>showGroupStructure</code>"
            }
          ],
          "description": "Sets a new value for property {@link #getShowGroupStructure showGroupStructure}.\n\nDetermines whether the toolbar button group containing commands like Bullets and Indentation is available. Changing this after the initial rendering will result in some visible redrawing.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>true</code>."
        },
        {
          "name": "setShowGroupTextAlign",
          "visibility": "public",
          "returnValue": {
            "type": "sap.ui.richtexteditor.RichTextEditor",
            "description": "Reference to <code>this</code> in order to allow method chaining"
          },
          "parameters": [
            {
              "name": "bShowGroupTextAlign",
              "type": "boolean",
              "optional": false,
              "description": "New value for property <code>showGroupTextAlign</code>"
            }
          ],
          "description": "Sets a new value for property {@link #getShowGroupTextAlign showGroupTextAlign}.\n\nDetermines whether the toolbar button group containing text alignment commands is available. Changing this after the initial rendering will result in some visible redrawing.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>true</code>."
        },
        {
          "name": "setShowGroupUndo",
          "visibility": "public",
          "returnValue": {
            "type": "sap.ui.richtexteditor.RichTextEditor",
            "description": "Reference to <code>this</code> in order to allow method chaining"
          },
          "parameters": [
            {
              "name": "bShowGroupUndo",
              "type": "boolean",
              "optional": false,
              "description": "New value for property <code>showGroupUndo</code>"
            }
          ],
          "description": "Sets a new value for property {@link #getShowGroupUndo showGroupUndo}.\n\nDetermines whether the toolbar button group containing commands like Undo and Redo is available. Changing this after the initial rendering will result in some visible redrawing.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>false</code>."
        },
        {
          "name": "setTextDirection",
          "visibility": "public",
          "returnValue": {
            "type": "sap.ui.richtexteditor.RichTextEditor",
            "description": "Reference to <code>this</code> in order to allow method chaining"
          },
          "parameters": [
            {
              "name": "sTextDirection",
              "type": "sap.ui.core.TextDirection",
              "optional": false,
              "description": "New value for property <code>textDirection</code>"
            }
          ],
          "description": "Sets a new value for property {@link #getTextDirection textDirection}.\n\nThe text direction\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>Inherit</code>."
        },
        {
          "name": "setUseLegacyTheme",
          "visibility": "public",
          "returnValue": {
            "type": "object",
            "description": "Control instance (for method chaining)"
          },
          "parameters": [
            {
              "name": "bUseLegacyTheme",
              "type": "boolean",
              "optional": true,
              "description": "Whether to use the legacy button theme"
            }
          ],
          "description": "Allows to opt out of the legacy theme that is applied to keep the old button look. In case butons are used that are not in the legacy theme, this can be disabled in order to show the button correctly."
        },
        {
          "name": "setValue",
          "visibility": "public",
          "returnValue": {
            "type": "sap.ui.richtexteditor.RichTextEditor",
            "description": "Reference to <code>this</code> in order to allow method chaining"
          },
          "parameters": [
            {
              "name": "sValue",
              "type": "string",
              "optional": false,
              "description": "New value for property <code>value</code>"
            }
          ],
          "description": "Sets a new value for property {@link #getValue value}.\n\nAn HTML string representing the editor content. Because this is HTML, the value cannot be generically escaped to prevent cross-site scripting, so the application is responsible for doing so. Overwriting this property would also reset editor's Undo manager and buttons \"Undo\"/\"Redo\" would be set to their initial state.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>empty string</code>."
        },
        {
          "name": "setWidth",
          "visibility": "public",
          "returnValue": {
            "type": "sap.ui.richtexteditor.RichTextEditor",
            "description": "Reference to <code>this</code> in order to allow method chaining"
          },
          "parameters": [
            {
              "name": "sWidth",
              "type": "sap.ui.core.CSSSize",
              "optional": false,
              "description": "New value for property <code>width</code>"
            }
          ],
          "description": "Sets a new value for property {@link #getWidth width}.\n\nWidth of RichTextEditor control in CSS units.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored."
        },
        {
          "name": "setWrapping",
          "visibility": "public",
          "returnValue": {
            "type": "sap.ui.richtexteditor.RichTextEditor",
            "description": "Reference to <code>this</code> in order to allow method chaining"
          },
          "parameters": [
            {
              "name": "bWrapping",
              "type": "boolean",
              "optional": false,
              "description": "New value for property <code>wrapping</code>"
            }
          ],
          "description": "Sets a new value for property {@link #getWrapping wrapping}.\n\nDetermines whether the text in the editor is wrapped. This does not affect the editor's value, only the representation in the control.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>true</code>."
        }
      ]
    }
  ]
}
